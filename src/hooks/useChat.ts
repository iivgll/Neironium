import { useState, useCallback } from 'react';
import { Message } from '@/types/chat';
import { AttachedFile } from '@/types/file';

export interface UseChatOptions {
  onError?: (error: Error) => void;
}

export const useChat = (options: UseChatOptions = {}) => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [model, setModel] = useState<string>('gpt-4o');
  const [isThinking, setIsThinking] = useState(false);
  const [showThinkingProcess, setShowThinkingProcess] = useState(false);
  const [hasCompletedThinking, setHasCompletedThinking] = useState(false);
  const [streamingResponse, setStreamingResponse] = useState('');

  const sendMessage = useCallback(
    async (message: string, attachedFiles?: AttachedFile[]) => {
      if (!message.trim() && (!attachedFiles || attachedFiles.length === 0))
        return;

      // Add user message
      let displayContent = message;
      if (attachedFiles && attachedFiles.length > 0) {
        const filesList = attachedFiles.map((f) => f.name).join(', ');
        displayContent = message
          ? `${message}\n\nüìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: ${filesList}`
          : `üìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: ${filesList}`;
      }

      const userMessage: Message = {
        role: 'user',
        content: displayContent,
        timestamp: new Date(),
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      const thinkingText = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å. –ü–æ–∑–≤–æ–ª—å—Ç–µ –º–Ω–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç–≤–µ—Ç.

## –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞

–ú–Ω–µ –Ω—É–∂–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ **–∫–ª—é—á–µ–≤—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤** –≤–æ–ø—Ä–æ—Å–∞:

1. **–û—Å–Ω–æ–≤–Ω–∞—è —Ç–µ–º–∞** - –æ —á—ë–º –∏–º–µ–Ω–Ω–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
2. **–ö–æ–Ω—Ç–µ–∫—Å—Ç** - –≤ –∫–∞–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ –Ω—É–∂–µ–Ω –æ—Ç–≤–µ—Ç
3. **–ì–ª—É–±–∏–Ω–∞** - –Ω–∞—Å–∫–æ–ª—å–∫–æ –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Ç—Ä–µ–±—É–µ—Ç—Å—è

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–µ–º—ã:
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
- –û–±—â–∏–µ –∑–Ω–∞–Ω–∏—è
- –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
- –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –¥–∞–Ω–Ω—ã–µ

## –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞

–Ø –¥—É–º–∞—é, –ª—É—á—à–µ –≤—Å–µ–≥–æ –±—É–¥–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:

### –ü–ª–∞–Ω –æ—Ç–≤–µ—Ç–∞:
1. –ù–∞—á–∞—Ç—å —Å –æ–±—â–µ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è
2. –ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
3. –ü—Ä–∏–≤–µ—Å—Ç–∏ –ø—Ä–∏–º–µ—Ä—ã –∏ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏
4. –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏

–û–∫, —Ç–µ–ø–µ—Ä—å —è –≥–æ—Ç–æ–≤ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏—Å—á–µ—Ä–ø—ã–≤–∞—é—â–∏–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç...`;
      
      // –°—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å –ø—Ä–æ—Ü–µ—Å—Å–æ–º —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è
      const thinkingMessage: Message = {
        role: 'assistant',
        content: '',
        timestamp: new Date(),
        metadata: {
          hasThinkingProcess: true,
          thinkingText: thinkingText,
          thinkingExpanded: showThinkingProcess
        }
      };
      
      setMessages((prev) => [...prev, userMessage, thinkingMessage]);
      setIsLoading(true);
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ
      setIsThinking(true);
      setHasCompletedThinking(false);
      setStreamingResponse('');

      try {
        // Simulate thinking process - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è 3-4 —Å–µ–∫—É–Ω–¥—ã
        await new Promise((resolve) => setTimeout(resolve, 3500));
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è, –Ω–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
        setIsThinking(false);
        setHasCompletedThinking(true);
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –æ—Ç–≤–µ—Ç–∞
        await new Promise((resolve) => setTimeout(resolve, 500));

        let responseContent = `# –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å

–≠—Ç–æ **–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç** –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ Neuronium. –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –≤–∞—à–µ API.

## –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã

–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å:
- üí° –û—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
- üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Ç–µ–∫—Å—Ç–∞
- üìä –ê–Ω–∞–ª–∏–∑–æ–º –¥–∞–Ω–Ω—ã—Ö
- üé® –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏

## –ü—Ä–∏–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

![–ß—Ç–æ —Ç–∞–∫–æ–µ –ò–ò](https://beconnected.esafety.gov.au/pluginfile.php/99437/mod_resource/content/2/what-is-ai%20%281%29.jpg)

### –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:

1. **–ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã** - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
2. **–¢–æ—á–Ω–æ—Å—Ç—å** - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥–æ–≤—ã—Ö —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π
3. **–ú–Ω–æ–≥–æ–∑–∞–¥–∞—á–Ω–æ—Å—Ç—å** - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤

–ú–æ—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –º–Ω–µ —Ç—â–∞—Ç–µ–ª—å–Ω–æ –æ–±–¥—É–º—ã–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç –ø–µ—Ä–µ–¥ –µ–≥–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º.`;
        
        if (attachedFiles && attachedFiles.length > 0) {
          responseContent = `üìÑ **–Ø –≤–∏–∂—É, —á—Ç–æ –≤—ã –ø—Ä–∏–∫—Ä–µ–ø–∏–ª–∏ ${attachedFiles.length} —Ñ–∞–π–ª(–æ–≤).**\n\n${responseContent}`;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        setStreamingResponse('');

        // –ê–Ω–∏–º–∏—Ä—É–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–∏–º–≤–æ–ª –∑–∞ —Å–∏–º–≤–æ–ª–æ–º
        for (let i = 0; i <= responseContent.length; i++) {
          const currentText = responseContent.slice(0, i);
          setStreamingResponse(currentText);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          setMessages((prev) => {
            const updatedMessages = [...prev];
            if (updatedMessages.length > 0) {
              updatedMessages[updatedMessages.length - 1] = {
                ...updatedMessages[updatedMessages.length - 1],
                content: currentText,
                metadata: {
                  ...updatedMessages[updatedMessages.length - 1].metadata,
                  hasThinkingProcess: true,
                  thinkingText: thinkingText,
                  thinkingExpanded: showThinkingProcess
                }
              };
            }
            return updatedMessages;
          });
          
          await new Promise((resolve) => setTimeout(resolve, 20)); // 20ms –Ω–∞ —Å–∏–º–≤–æ–ª
        }

        setStreamingResponse('');
      } catch (error) {
        const errorMessage =
          error instanceof Error ? error.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞';
        options.onError?.(new Error(errorMessage));

        // Optionally add error message to chat
        const errorMsg: Message = {
          role: 'assistant',
          content: `–û—à–∏–±–∫–∞: ${errorMessage}`,
          timestamp: new Date(),
        };
        setMessages((prev) => [...prev, errorMsg]);
      } finally {
        setIsLoading(false);
        setIsThinking(false);
      }
    },
    [options],
  );

  const clearMessages = useCallback(() => {
    setMessages([]);
    setIsThinking(false);
    setShowThinkingProcess(false);
    setHasCompletedThinking(false);
    setStreamingResponse('');
  }, []);

  const toggleThinkingProcess = useCallback(() => {
    setShowThinkingProcess(!showThinkingProcess);
  }, [showThinkingProcess]);

  return {
    messages,
    isLoading,
    model,
    setModel,
    sendMessage,
    clearMessages,
    isThinking,
    showThinkingProcess,
    toggleThinkingProcess,
    hasCompletedThinking,
    streamingResponse,
  };
};
