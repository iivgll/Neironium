import { apiClient } from "./apiClient";

export interface StreamEvent {
  type: "message_start" | "message_delta" | "message_end" | "error";
  data?: any;
  error?: string;
}

export class MessageStreamHandler {
  private decoder = new TextDecoder();

  async handleStream(
    chatId: number,
    content: string,
    onEvent: (event: StreamEvent) => void,
    clientMessageId?: string,
  ): Promise<void> {
    try {
      const stream = await apiClient.streamMessage(
        chatId,
        content,
        clientMessageId,
      );
      const reader = stream.getReader();

      let buffer = "";
      let isReading = true;

      while (isReading) {
        const { done, value } = await reader.read();

        if (done) {
          isReading = false;
          onEvent({ type: "message_end" });
          break;
        }

        // –î–µ–∫–æ–¥–∏—Ä—É–µ–º chunk –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫ –±—É—Ñ–µ—Ä—É
        const chunk = this.decoder.decode(value, { stream: true });
        buffer += chunk;

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–ª–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –±—É—Ñ–µ—Ä–µ
        const lines = buffer.split("\n");
        buffer = lines.pop() || ""; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ–ø–æ–ª–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ –±—É—Ñ–µ—Ä–µ

        for (const line of lines) {
          if (line.trim() === "") continue;

          console.log("üì¶ Processing line:", line);

          try {
            // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ - —ç—Ç–æ JSON –æ–±—ä–µ–∫—Ç
            const eventData = JSON.parse(line);
            console.log("üì¶ Parsed eventData:", eventData);
            onEvent({
              type: eventData.type || "message_delta",
              data: eventData.data || eventData, // –ï—Å–ª–∏ data –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å –æ–±—ä–µ–∫—Ç
            });
          } catch (parseError) {
            console.log("üì¶ JSON parse failed, trying SSE format");
            // –ï—Å–ª–∏ –Ω–µ JSON, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
            if (line.startsWith("data: ")) {
              const data = line.substring(6);
              console.log("üì¶ SSE data:", data);
              try {
                const parsedData = JSON.parse(data);
                console.log("üì¶ Parsed SSE data:", parsedData);
                onEvent({
                  type: "message_delta",
                  data: parsedData,
                });
              } catch {
                console.log("üì¶ Using raw SSE data as content");
                onEvent({
                  type: "message_delta",
                  data: { content: data },
                });
              }
            } else {
              // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –∫–æ–Ω—Ç–µ–Ω—Ç
              console.log("üì¶ Using line as plain content");
              onEvent({
                type: "message_delta",
                data: { content: line },
              });
            }
          }
        }
      }
    } catch (error) {
      console.error("Stream handling error:", error);
      onEvent({
        type: "error",
        error: error instanceof Error ? error.message : "Streaming failed",
      });
    }
  }
}

export const streamHandler = new MessageStreamHandler();
